structure A = Absyn

fun makeIf(e1, e2, el, p) =  A.IfExp {test = e1, then' = e2, else' = el, pos = p}

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS
  | LOWPREC

%nonterm  exp of A.exp 
  | program of A.exp
  | seqexp of (A.exp * pos) list
  | seqList of (A.exp * pos) list
  | lvalue of A.var
  | dec of A.dec
  | declist of A.dec list
  | tyField of A.field
  | tyFields of A.field list
  | tyFieldsList of A.field list
  | explist of A.exp list
  | explistC of A.exp list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
  DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc LOWPREC
%nonassoc FUNCTION VAR TYPE THEN DO OF ASSIGN
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%right UMINUS
%right ELSE 
%left AND
%left OR

%%

program : exp (exp)

exp: lvalue (A.VarExp lvalue)
  | MINUS exp %prec UMINUS (A.OpExp {left=A.IntExp ~1, oper=A.TimesOp, right=exp, pos=MINUSleft})
  | NIL (A.NilExp)
  | INT (A.IntExp INT)
  | STRING (A.StringExp (STRING, STRINGleft))
  | exp MINUS exp (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})
  | exp PLUS exp (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
  | exp TIMES exp (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
  | exp DIVIDE exp (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})
  | LET declist IN seqexp END (A.LetExp {decs=declist,body=A.SeqExp(seqexp),pos=LETleft})
  | lvalue ASSIGN exp (A.AssignExp {var=lvalue, exp=exp, pos=lvalueleft})
  
seqexp:                 (nil)
|  exp seqList          ((exp, expleft) :: seqList)

seqList:                (nil)
|  SEMICOLON exp seqList  ((exp,expleft) :: seqList)

lvalue: ID (A.SimpleVar(Symbol.symbol ID, IDleft))

dec: VAR ID COLON ID ASSIGN exp (A.VarDec {name=Symbol.symbol ID1, init=exp, pos=VARleft, escape= ref true, typ=SOME (Symbol.symbol ID2, ID2left)})
  | TYPE ID EQ ID  (A.TypeDec[{name= Symbol.symbol ID1, ty=A.NameTy(Symbol.symbol ID2, ID2left), pos=TYPEleft}])
  
declist: dec (dec :: nil)
  | dec declist (dec :: declist)

